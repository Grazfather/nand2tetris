// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len;
    field Array buf;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = 0;
        if (maxLength > 0) {
            let buf = Memory.alloc(maxLength);
        } else {
            let buf = 0;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(buf = 0)) {
            do Memory.deAlloc(buf);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buf[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buf[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let buf[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        let buf[len] = 0; // TODO: What if len is already zero?
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int val;
        var bool neg;
        let neg = false;
        let i = 0;
        let val = 0;
        if ((len > 0) & (buf[i] = 45)) {// Test for -
            let neg = true;
            let i = 1;
        }
        while (i < len) {
            // TODO: Negative sign
            if ((buf[i] > 47) & (buf[i] < 58)) {
                let val = val * 10 + (buf[i] - 48);
            } else {
                if (neg) {
                    return -val;
                }
                return val;
            }
            let i = i + 1;
        }
        if (neg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0; // Reset to start of string

        // Handle negative values
        if (val < 0) {
            do appendChar(45); // '-'
            do recSetInt(-val);
        } else {
            do recSetInt(val);
        }
        return;
    }

    method void recSetInt(int val) {
        if (val > 10) {
            // Print the higher digits recursively
            do recSetInt(val/10);
            // Print the bottom digit
            do appendChar(48 + val - ((val / 10) * 10));
        } else {
            do appendChar(48 + val);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
	static Array ram;
	static Array heap;
	static Array freelist;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let freelist = 2048; // TODO: What is the heap base?
		let freelist[0] = 0; // next = NULL
		let freelist[1] = 14336; // TODO: What is the size of the heap?
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int diff;
		var int best;
		var int current;
		var int prev;
		var int best_prev;
		var int bail;
		var int p;

		// Iterate through the free list and find the best fit
		let size = size + 2; // Account for chunk metadata
		let best = freelist;
		let diff = freelist[1] - size;
		let current = freelist;
		let best_prev = 0;
		let prev = 0;
		while (~(current = 0)) {
			if ((current[1] - size) > 0) { // If there's a fit
				if ((current[1] - size) < diff) { // And the fit is closer than any so far
					// Set this chunk to the best so far
					let diff = current[1] - size;
					let best = current;
					let best_prev = prev;
				}
			}
			let prev = current;
			let current = current[0]; // Move up
		}
		if (diff > 3) { // Split chunk;
			let current = best[0];
			let p = best; // We're going to return this chunk
			let best = p + size; // Reuse best to point to leftover chunk
			let best[0] = current;
			let best[1] = p[1] - size;
			let p[0] = 1111; // There is no current pointer for an in use chunk
			let p[1] = size;

			let p =  p;
		} else {
			if ((diff + 1) > 0) { // Close to perfect
				let current = best[0];
				let p = best;
				let p[0] = 1111; // There is no current pointer for an in use chunk
				let best = current; // The new next
			} else { // Nothing found
				return 0;
			}
		}
		if (p = freelist) { // If we are returning the first chunk
			// Then adjust the freelist
			let freelist = best;
		} else {
			// Otherwise adjust the previous
			let best_prev[0] = best; // Adjust pointer to this leftover chunk
		}
		// If we're returning what was at the head of the list, we must adjust it
		if ((p - 2) = freelist) {
			let freelist = best;
		}
		return p + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		// Re-add chunk to start of free list.
		// TODO: Coalesce
		var int next;
		let next = freelist;
		let freelist = o - 2;
		let freelist[0] = next;
		return;
    }
}
